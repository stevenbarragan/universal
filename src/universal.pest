language = _{ NEWLINE* ~ (module | expression ~(NEWLINE* ~ expression)* | function_def) }

expression = { custom_type | assignation | import | instruction }
instruction = { (boolean ~ (boolean_operator ~ boolean)*) }
boolean_operator = { "==" | "!=" | "<=" | ">=" | "<" | ">" | "min" | "max" }
boolean = { summand ~ (summand_operator ~ summand)* }
summand_operator = { "+" | "-" }
summand = { unary ~ (factor_operator ~ unary)*  }
factor_operator = { "*" | "/" }
unary = { (unary_operator ~ primary) | primary }
unary_operator = { "!" | "-" }
primary = { "(" ~ expression ~ ")" | array | array_access | endvalues }
endvalues  = _{ custom_type_instance | symbol | float | integer | conditional | self_function_call | self_attribute_access | variable_method_call | variable_attribute_access | function_call | bool | variable }

float = @{ integer ~ "." ~ integer }

custom_type_instance = { type_name ~ NEWLINE ~ attributes_values ~ "end" }
type_name = @{ UPPERCASE_LETTER ~ (LETTER | NUMBER)* }
attributes_values = { (name ~ ":" ~ instruction ~ NEWLINE)* }

custom_type = {"Type" ~ name ~ NEWLINE+ ~ attributes ~ NEWLINE* ~ methods ~ NEWLINE* ~ "end" }
attributes = { (variable_def ~ NEWLINE+)* }
methods = { (function_def ~ NEWLINE+)* }

bool = { thruty | falsey }
thruty = { "true" }
falsey = { "false" }

array = { "[" ~ (instruction ~ ("," ~ instruction )*)? ~ "]" }
array_access = ${ variable ~ "[" ~ integer ~ "]" }

assignation = { (variable_def | variable) ~ "=" ~ instruction }

import = { "import" ~ filepath }
filepath = @{ LETTER+ }

conditional = { conditional_type ~ expression ~ block ~ else_block? ~ "end" }
conditional_type = { "if" | "unless" }
else_block = _{ "else" ~ block }

module = { "module" ~ name ~ module_block ~ "end" }
module_block = { (NEWLINE* ~ (expression | function_def))+ ~ NEWLINE* }

integer = @{ NUMBER+ }

function_call = { function_name ~ "(" ~ function_params? ~ ")" }
function_params = { expression ~ ("," ~ expression)* }
function_name = { name ~ ("." ~ name)? }

variable_attribute_access = { name ~ "." ~ name }
variable_method_call = { name ~ "." ~ function_call }

self_function_call = {"self." ~ function_call }
self_attribute_access = {"self." ~ name }

function_def = { public? ~ "fn" ~ name ~ ("(" ~ params? ~ ")")? ~ ":" ~ results ~ block ~ "end" }
public = { "export" }

block = { (NEWLINE* ~ expression)* ~ NEWLINE* }

results = { kind ~ ("," ~ kind)* }
params = { param ~ ("," ~ param)* }
param = { variable ~ ":" ~ kind }

variable_def = { variable ~ ":" ~ kind }
variable = { !reserve_word ~ name }
kind = { name }

name = @{ LETTER ~ (LETTER | NUMBER)* }

symbol = { ":" ~ (symbol_value | "\"" ~ string_value ~ "\"") }
symbol_value = @{ (LETTER | NUMBER)+ }
string_value = { (LETTER | NUMBER)* }

reserve_word = _{ "end" | "fn" | "module" | "if" | "else" | "unless" | "export" }

WHITESPACE = _{ " " | "\t" | "\r" }
NEWLINE = _{ "\n" | ";" }
